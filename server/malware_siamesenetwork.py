# -*- coding: utf-8 -*-
"""Malware_SiameseNetwork.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11GKp7M26uCnHz51CPapgUKd8MCx0q7t7
"""

!git clone https://github.com/iosifache/DikeDataset.git

!pip install pyinstaller

!rm -rf

!pip install pyzipper

!pip install imbalanced-learn

import numpy as np
import os
import pandas as pd
from sklearn.model_selection import train_test_split

def read_file(file_path, max_length=1024):
    with open(file_path, 'rb') as f:
        data = np.frombuffer(f.read(), dtype=np.uint8)
        if len(data) < max_length:
            data = np.pad(data, (0, max_length - len(data)), 'constant')
        else:
            data = data[:max_length]
    return data

benign_labels = pd.read_csv('DikeDataset/labels/benign.csv')
malware_labels = pd.read_csv('DikeDataset/labels/malware.csv')

benign_files = [os.path.join('DikeDataset/files/benign', f) for f in os.listdir('DikeDataset/files/benign')]
malware_files = [os.path.join('DikeDataset/files/malware', f) for f in os.listdir('DikeDataset/files/malware')]

benign_data = [read_file(f) for f in benign_files]
malware_data = [read_file(f) for f in malware_files]

benign_data = np.array(benign_data)
malware_data = np.array(malware_data)

def create_pairs(benign_data, malware_data, num_pairs):
    pairs = []
    labels = []
    for _ in range(num_pairs):
        b = benign_data[np.random.randint(0, benign_data.shape[0])]
        m = malware_data[np.random.randint(0, malware_data.shape[0])]
        pairs.append((b, m))
        labels.append(0)
    for _ in range(num_pairs):
        m = malware_data[np.random.randint(0, malware_data.shape[0])]
        b = benign_data[np.random.randint(0, benign_data.shape[0])]
        pairs.append((m, b))
        labels.append(1)
    return np.array(pairs), np.array(labels)

num_pairs = min(len(benign_data), len(malware_data))
pairs, labels = create_pairs(benign_data, malware_data, num_pairs)

X_pairs = np.array([(pair[0], pair[1]) for pair in pairs])
X1 = X_pairs[:, 0, :].reshape(-1, 1024, 1)
X2 = X_pairs[:, 1, :].reshape(-1, 1024, 1)

X1_train, X1_test, X2_train, X2_test, y_train, y_test = train_test_split(X1, X2, labels, test_size=0.2, random_state=42)

print("X1_train shape:", X1_train.shape)
print("X2_train shape:", X2_train.shape)
print("y_train shape:", y_train.shape)

import tensorflow as tf
from tensorflow.keras import layers, models

input_shape = (1024, 1)

def create_base_network(input_shape):
    model = models.Sequential()
    model.add(layers.Input(shape=input_shape))
    model.add(layers.Conv1D(32, 3, activation='relu'))
    model.add(layers.MaxPooling1D(pool_size=2))
    model.add(layers.Conv1D(64, 3, activation='relu'))
    model.add(layers.MaxPooling1D(pool_size=2))
    model.add(layers.Flatten())
    model.add(layers.Dense(128, activation='relu'))
    return model

base_network = create_base_network(input_shape)

input_a = layers.Input(shape=input_shape)
input_b = layers.Input(shape=input_shape)

processed_a = base_network(input_a)
processed_b = base_network(input_b)

distance = layers.Lambda(lambda tensors: tf.abs(tensors[0] - tensors[1]))([processed_a, processed_b])
output = layers.Dense(1, activation='sigmoid')(distance)

siamese_model = models.Model(inputs=[input_a, input_b], outputs=output)
siamese_model.compile(optimizer='adam', loss="binary_crossentropy", metrics=['accuracy'])

siamese_model.fit([X1_train, X2_train], y_train, epochs=15, batch_size=32, validation_data=([X1_test, X2_test], y_test))

import numpy as np
import tensorflow as tf

def preprocess_file(file_path, max_length=1024):
    with open(file_path, 'rb') as f:
        data = np.frombuffer(f.read(), dtype=np.uint8)
        print(data)
        if len(data) < max_length:
            data = np.pad(data, (0, max_length - len(data)), 'constant')
        else:
            data = data[:max_length]
    return data.reshape(-1, 1024, 1)

def detect_malware(model, input_file_path, reference_file_path):
    input_data = preprocess_file(input_file_path)
    reference_data = preprocess_file(reference_file_path)

    prediction = model.predict([input_data, reference_data])
    similarity_score = prediction[0][0]

    if similarity_score > 0.5:
        print(f"The input file is likely malware with a similarity score of {similarity_score:.2f}.")
    else:
        print(f"The input file is likely benign with a similarity score of {similarity_score:.2f}.")

input_file_path = '/content/DikeDataset/files/benign/238a9de495ddb87555913ec5d1f67bcc22b5d754b21b7ae9da3158461547da00.exe'
reference_file_path = '/content/DikeDataset/files/malware/000077419ead44800537b34f5c2137e572c472698a13c39151f90eaabde7c94e.exe'
detect_malware(siamese_model, input_file_path, reference_file_path)

siamese_model.save('siamese_malware.h5')

